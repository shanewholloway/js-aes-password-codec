export function aesgcm_password_codec_options(options) ::
  if 'string' === typeof options ::
    options = @{} salt: options
  else ::
    options = Object.assign @ {iv_size: 12}, options

  const pbkdf2 = Object.assign @
    @{} hash: 'SHA-256'
        salt: options.salt
        iterations: options.iterations || 100000
    options.pbkdf2

  const cipher = Object.assign @
    @{} alg: 'AES-GCM', length: 128, tagLength: 128
    options.cipher

  pbkdf2.keylen = cipher.length / 8

  return @{} pbkdf2, cipher
    iv_size: options.iv_size
    extractable: options.extractable


export function aesgcm_password_codec_api(base_api) ::
  const { encrypt_u8, decrypt_u8, utf8_to_u8, u8_to_utf8 } = base_api
  return @{}
    __proto__: base_api

    encrypt_json: obj =>
      encrypt_u8 @ 
        utf8_to_u8 @ 
          JSON.stringify(obj)

    decrypt_json: enc_rec_b64 => 
      decrypt_u8(enc_rec_b64)
        .then @ u8 => JSON.parse @ u8_to_utf8 @ u8
  
    encrypt_utf8: str =>
      encrypt_u8 @ utf8_to_u8 @ str

    decrypt_utf8: enc_rec_b64 => 
      decrypt_u8(enc_rec_b64)
        .then @ u8 => u8_to_utf8 @ u8
  
